openapi: 3.0.1
info:
  title: Swagger BLOG
  description: 'This is the best swagger for the best blog you''ve ever seen'
  # termsOfService: http://swagger.io/terms/
  contact:
    email: s.sviataslau@gmail.com
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://blog.swagger.io/v2
- url: http://blog.swagger.io/v2
tags:
- name: post
  description: Everything about your Posts
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: comment
  description: Access to comments
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /post:
    put:
      tags:
      - post
      summary: Update an existing post
      operationId: updatePost
      requestBody:
        description: Post object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Post not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - blog_auth:
        - write:posts
        - read:posts
    post:
      tags:
      - post
      summary: Add a new post to the store
      operationId: addPost
      requestBody:
        description: Post object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - blog_auth:
        - write:posts
        - read:posts
  /post/{postId}:
    get:
      tags:
      - post
      summary: Find post by ID
      description: Returns a single post
      operationId: getPostById
      parameters:
      - name: postId
        in: path
        description: ID of post to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Post not found
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - post
      summary: Updates a post in the store with form data
      operationId: updatePostWithForm
      parameters:
      - name: postId
        in: path
        description: ID of post that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the post
                status:
                  type: string
                  description: Updated status of the post
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - blog_auth:
        - write:posts
        - read:posts
    delete:
      tags:
      - post
      summary: Deletes a post
      operationId: deletePost
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: postId
        in: path
        description: Post id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Post not found
          content: {}
      security:
      - blog_auth:
        - write:posts
        - read:posts
  /user:
    put:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Post:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: post status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Post
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    blog_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://poststore.swagger.io/oauth/dialog
          scopes:
            write:posts: modify posts in your account
            read:posts: read your posts
    api_key:
      type: apiKey
      name: api_key
      in: header
