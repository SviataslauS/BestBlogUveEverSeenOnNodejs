openapi: 3.0.1
info:
  title: Swagger BLOG
  contact:
    email: s.sviataslau@gmail.com
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
tags:
- name: post
  description: Everything about your Posts
- name: comment
  description: Access to comments
- name: user
  description: Operations about user
paths:
  /posts:
    get:
      tags:
      - post
      summary: Get all posts
      description: Returns all posts
      operationId: getAllPosts
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Post not found
          content: {}
    post:
      tags:
      - post
      summary: Add a new post to the blog
      operationId: addPost
      requestBody:
        description: Post object that needs to be added to the blog
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        201:
          description: successful operation
          content: {}
        405:
          description: Invalid input
          content: {}
  /posts/statistic:
    get:
      tags:
      - post
      summary: Returs posts per day, week, month
      operationId: getStatistic
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsStatistic'
  /posts/{postId}:
    get:
      tags:
      - post
      summary: Find post by ID
      description: Returns a single post
      operationId: getPostById
      parameters:
      - name: postId
        in: path
        description: ID of post to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Post not found
          content: {}
    put:
      tags:
      - post
      summary: Updates a post in the blog
      operationId: updatePost
      parameters:
      - name: postId
        in: path
        description: ID of post that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the post
      responses:
        405:
          description: Invalid input
          content: {}
    delete:
      tags:
      - post
      summary: Deletes a post
      operationId: deletePost
      parameters:
      - name: postId
        in: path
        description: Post id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Post not found
          content: {}
  /posts/{postId}/comments:
    post:
      tags:
      - comment
      summary: Add a new comment to the post
      operationId: addComment
      parameters:
      - name: postId
        in: path
        description: Post id of comments
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Post object that needs to be added to the blog
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        201:
          description: successful operation
          content: {}
        405:
          description: Invalid input
          content: {}
  /posts/{postId}/comments/{commentId}:
    get:
      tags:
      - comment
      summary: Find comment by ID
      description: Returns a single comment
      operationId: getCommentById
      parameters:
      - name: postId
        in: path
        description: Post id to delete
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        description: ID of comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Comment not found
          content: {}
    post:
      tags:
      - comment
      summary: Updates a comment in the blog with form data
      operationId: updateComment
      parameters:
      - name: postId
        in: path
        description: Post id for comment
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        description: ID of comment that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      responses:
        405:
          description: Invalid input
          content: {}
    delete:
      tags:
      - comment
      summary: Delete a comment
      operationId: deleteComment
      parameters:
      - name: postId
        in: path
        description: Post id for comment
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        description: Comment id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Comment not found
          content: {}
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/{id}:
    get:
      tags:
      - user
      summary: Get user by user id
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: 'The id that needs to be fetched. Use 1 for testing. '
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid id supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: id of user that need to be updated
        required: true
        schema:
          type: integer
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: The id that needs to be deleted
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: authentication  
  schemas:
    User:
      required:
      - username
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        fullName:
          type: string
        email:
          type: string
        role:
          type: integer
          description: User Role
          format: int32
      xml:
        name: User
    Post:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: doggie
        creationDate:
          type: string
          example: 30/02/2012
      xml:
        name: Post
    PostsStatistic:
      required:
      - postsPerDay
      - postsPerWeek
      - postsPerMonth
      type: object
      properties:
        postsPerDay:
          type: integer
          format: int64
        postsPerWeek:
          type: integer
          format: int64
        postsPerMonth:
          type: integer
          format: int64
    Comment:
      required:
      - postId
      type: object
      properties:
        id:
          type: integer
          format: int64
        postId:
          type: integer
          format: int64
        text:
          type: string
          example: u re crazy, man
        creationDate:
          type: string
          example: 30/02/2012
      xml:
        name: Comment
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
security:
  - cookieAuth: []